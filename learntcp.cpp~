#include <iostream>
#include <vector>
#include <algorithm>
#include <string>
#include <cstring>
#include <fstream>
#include <sstream>
#include "perceptron.hpp"

using namespace std;

#define LOOP_MAX 2000

int parseInt(char *arg){
  string str;
  int ret;

  for(int i=0;i<(int)strlen(arg);i++){
    str += arg[i];
  }

  istringstream iss(str);
  iss >> ret;

  return ret;
}

int main(int argc, char *argv[]){
  vector<string> teacher;
  vector<string> data;
  string str;
  double e;
  int t=0;
  long long tsum=0;
  int n;
  int ans;
  int takenAll=0, takenNormal=0;
  int gaveup=0, random=0;
  bool istaken;
  double pred;
  Perceptron p;

  if(argc == 1){
    cout << "input number of teacher. Exitting." <<endl;
    exit(0);
  }
  n = parseInt(argv[1]);
  cout << "history length = " << n << endl;

  //データの読み込み
  ifstream fin("./data.dat");

  while(getline(fin,str)){
    data.push_back(str);
  }

  cout << "data loaded. # of data =" << data.size() << endl;
  
  //n番目から予測を始める
  for(int i=n;i<(int)data.size();i++){
    teacher.clear(); //教師データのクリア
    p.init();        //perceptron内parameterのクリア
    for(int j=0;j<n;j++){
      teacher.push_back(data[i-1-j]); //教師データを加えていく
    }
    //与えた教師データでの学習を行う
    t = 0; //loop回数のカウンタリセット
    do{
      e = p.learn(teacher);
      t++;
      //cout << e << endl;
    }while(e > 0.05*n && t < LOOP_MAX);

    if(t == LOOP_MAX) gaveup++;

    //教師データ(正答)を取得
    istringstream iss(data[i]);
    for(int j=0;j<3;j++){
      iss >> ans;
    }
    iss >> ans;
    
    //paramter出力
    p.print_param();
    //教師データを流してperceptronからの出力を得る
    pred = p.get(data[i]);

    if(pred == 0.5){
      pred = rand() % 2;
      random++;
    }else if(pred > 0.5){
      pred = 1;
    }else{
      pred = 0;
    }

    if(fabs((double)ans - pred) == 0){
      takenAll++;
      if(t != LOOP_MAX) takenNormal++;
      istaken = true;
    }else{
      istaken = false;
    }
    printf("[%d]answer = %d, prediction = %d, istaken=%d, repeated %d times\n",
	   i,ans,(int)pred,istaken, t);
    if(t != LOOP_MAX){
      tsum += t;
    }
  }

  printf("taken rate(ALL)=%lf(%d/%d), ",(double)takenAll / (data.size()- n), takenAll, (int)data.size() - n);
  printf("taken rate(except gave up) = %lf(%d/%d)\n", (double)takenNormal / (data.size() - n - gaveup), takenNormal, 
	 (int)data.size() - n - gaveup);
  printf("average loop times(except gave up) = %lf, ", (double)tsum / (data.size() - n - gaveup));
  printf("# of gaveup = %d, # of determined randomly = %d\n", gaveup, random);
}
